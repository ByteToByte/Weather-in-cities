{"version":3,"sources":["components/info.jsx","components/form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","async","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPASeA,EAPF,kBACX,6BACM,6IACA,+KCIOC,EAPF,SAAAC,GAAK,OAChB,0BAAMC,SAAUD,EAAME,eAChB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCUOC,EAbC,SAAAN,GAAK,OACnB,yBAAKO,UAAU,aACNP,EAAMQ,MACP,6BACE,oHAAoBR,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxC,kGAAiBT,EAAMU,MACvB,gFAAcV,EAAMW,UACpB,mGAAkBX,EAAMY,SAG5B,uBAAGL,UAAU,SAAUP,EAAMa,SCP/BC,EAAU,mCA6EDC,E,2MAzEbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGTC,eAAiB,SAAOC,GAAP,yBAAAC,EAAAC,OAAA,mDACfF,EAAEG,mBACEd,EAAOW,EAAEI,OAAOC,SAAShB,KAAKiB,OAFnB,mCAAAL,EAAA,MAMbM,MAAM,oDAAD,OAAqDlB,EAArD,kBAAmEM,KAN3D,cAKPa,EALO,kBAAAP,EAAA,MAOMO,EAAQC,QAPd,OAOPC,EAPO,OAUTjB,EAASiB,EAAKC,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAGzE,EAAKC,SAAS,CACZ5B,KAAMmB,EAAKU,KAAK7B,KAChBF,KAAMqB,EAAKzB,KACXK,QAASoB,EAAKC,IAAIrB,QAClBE,SAAUkB,EAAKU,KAAK5B,SACpBC,OAAQsB,EACRrB,WAAOI,IAtBI,wBAyBb,EAAKqB,SAAS,CACZ5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIA/BI,uC,wEAqCf,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,iBACf,kBAAC,EAAD,CAAML,cAAesC,KAAKtB,iBACxB,kBAAC,EAAD,CACER,KAAM8B,KAAKxB,MAAMN,KACjBF,KAAMgC,KAAKxB,MAAMR,KACjBC,QAAS+B,KAAKxB,MAAMP,QACpBE,SAAU6B,KAAKxB,MAAML,SACrBC,OAAQ4B,KAAKxB,MAAMJ,OACnBC,MAAO2B,KAAKxB,MAAMH,iB,GAhEhB4B,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.db16195a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n  <div>\n        <h2>Погодное приложение</h2>\n        <p>Узнай погоду в вашем городе</p>\n      </div>\n)\n\nexport default Info;","import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\n        <button>Получить погоду</button>  \n      </form>\n)\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n  <div className=\"infoWeath\">\n          {props.city && \n          <div>\n            <p>Местоположение: {props.city}, {props.country}</p>\n            <p>Температура: {props.temp}</p>\n            <p>Давление: {props.pressure}</p>\n            <p>Заход солнца: {props.sunset}</p>\n          </div>\n        }\n        <p className=\"error\">{ props.error }</p>\n      </div>\n)\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\"\nimport Form from \"./components/form\"\nimport Weather from \"./components/weather\"\n\nconst API_KEY = \"90b7882bfe55431d2435e59c125818a4\"\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n    \n    if(city){\n      const api_url = await \n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}`);\n      const data = await api_url.json();\n      \n\n      var sunset = data.sys.sunset;\n      var date = new Date();\n      date.setTime(sunset);\n      var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: undefined\n      });\n    }else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-5 info\">\n            <Info/>\n            </div>\n            <div className=\"col-sm-7 form\">\n            <Form weatherMethod={this.gettingWeather}/>\n              <Weather\n                temp={this.state.temp}\n                city={this.state.city}\n                country={this.state.country}\n                pressure={this.state.pressure}\n                sunset={this.state.sunset}\n                error={this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}